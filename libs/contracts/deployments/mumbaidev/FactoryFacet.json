{
  "address": "0xc8E8bE6f9b016DFcD2ead07cD66b2115983439A2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "diamond",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DiamondDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_facets",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_erc20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc721",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29d48a5ea30405589945a17e76368453af1b746bddd51d6e21fcfce6fa2efd5a",
  "receipt": {
    "to": null,
    "from": "0xE4f3EEA6CeB6D8Cda41E1F78F4c549946a1EB395",
    "contractAddress": "0xc8E8bE6f9b016DFcD2ead07cD66b2115983439A2",
    "transactionIndex": 12,
    "gasUsed": "2347681",
    "logsBloom": "0x08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000008000000000000000000000000000000000800000400000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000080000000000000000000000000000000000000000004000000000000000000001000000000100000000004000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xb44b3c4397029ce11bd83612a7e9dfbb64972e0c1eff111b8a57c36aebd3ec0d",
    "transactionHash": "0x29d48a5ea30405589945a17e76368453af1b746bddd51d6e21fcfce6fa2efd5a",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 28877270,
        "transactionHash": "0x29d48a5ea30405589945a17e76368453af1b746bddd51d6e21fcfce6fa2efd5a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e4f3eea6ceb6d8cda41e1f78f4c549946a1eb395",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c82ce1e138f000000000000000000000000000000000000000000000000004563d14df64f055e00000000000000000000000000000000000000000000000003ed68c761199b2e00000000000000000000000000000000000000000000000045574e7fd83b765e00000000000000000000000000000000000000000000000003f9eb957f2d2a2e",
        "logIndex": 69,
        "blockHash": "0xb44b3c4397029ce11bd83612a7e9dfbb64972e0c1eff111b8a57c36aebd3ec0d"
      }
    ],
    "blockNumber": 28877270,
    "cumulativeGasUsed": "4306305",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e05e2e2b5a61185fc376a30ea11af505",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diamond\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DiamondDeployed\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_facets\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy((address,uint8,bytes4[])[],address,address)\":{\"params\":{\"_erc20\":\"address ERC20 address.\",\"_erc721\":\"address ERC721 address.\",\"_facets\":\"string Array of FacetCuts that should be deployed\"}},\"initialize(address,address)\":{\"params\":{\"_owner\":\"Address of the default owner.\",\"_registry\":\"Address of the default registry contract.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address)\":{\"notice\":\"Sets the controller for the factory diamond.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Factory/FactoryFacet.sol\":\"FactoryFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IDefaultDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport 'diamond-2/contracts/interfaces/IERC173.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondLoupe.sol';\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\nimport '../modules/Registry/interfaces/IRegistryProxyFacet.sol';\\nimport '../modules/ERC20/interfaces/IERC20ProxyFacet.sol';\\nimport '../modules/ERC20/interfaces/IERC20SwapFacet.sol';\\nimport '../modules/ERC20/interfaces/IERC20DepositFacet.sol';\\nimport '../modules/ERC20/interfaces/IERC20WithdrawFacet.sol';\\nimport '../modules/ERC721/interfaces/IERC721ProxyFacet.sol';\\n\\ninterface IDefaultDiamond is\\n    IERC173,\\n    IDiamondLoupe,\\n    IDiamondCut,\\n    IRegistryProxyFacet,\\n    IERC20ProxyFacet,\\n    IERC20DepositFacet,\\n    IERC20WithdrawFacet,\\n    IERC20SwapFacet,\\n    IERC721ProxyFacet\\n{}\\n\",\"keccak256\":\"0xdd0748dcd328f1de816994390ab1f95c02452ba02600a3a91213b4986af64ecc\",\"license\":\"Apache-2.0\"},\"contracts/modules/ERC20/interfaces/IERC20DepositFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface IERC20DepositFacet {\\n    event ERC20DepositFeeCollected(uint256 fee);\\n    event ERC20DepositFrom(address sender, uint256 amount);\\n\\n    function depositFrom(address _sender, uint256 _amount) external;\\n\\n    function depositFromMany(address[] memory _senders, uint256[] memory _amounts) external;\\n}\\n\",\"keccak256\":\"0x273c5d4fa084355d2158dba1d4c3c101872fc0bfae6337e39f2d35642fb9c45d\",\"license\":\"Apache-2.0\"},\"contracts/modules/ERC20/interfaces/IERC20ProxyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface IERC20ProxyFacet {\\n    event ERC20ProxyUpdated(address old, address current);\\n    event ERC20ProxyFeeCollected(uint256 fee);\\n    event ERC20ProxyTransferFrom(address sender, address recipient, uint256 amount);\\n\\n    function setERC20(address _token) external;\\n\\n    function getERC20() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external;\\n\\n    function transferFromMany(\\n        address[] memory _senders,\\n        address[] memory _recipients,\\n        uint256[] memory _amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6947e4f9ffe71c0aea37852e8317fa7b3f1cfd0d1b160be26e1eadf784770f86\",\"license\":\"Apache-2.0\"},\"contracts/modules/ERC20/interfaces/IERC20SwapFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface IERC20SwapFacet {\\n    event ERC20SwapRuleUpdated(address tokenAddress, uint256 multiplier);\\n    event ERC20SwapFeeCollected(uint256 amount);\\n    event ERC20SwapFor(address sender, uint256 amountIn, uint256 amountOut, address tokenIn, address tokenOut);\\n\\n    function setSwapRule(address _tokenAddress, uint256 multiplier) external;\\n\\n    function getSwapRule(address _tokenAddress) external view returns (uint256);\\n\\n    function swapFor(\\n        address _sender,\\n        uint256 _amountIn,\\n        address _tokenAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd0dc53c62a899cb2abf10bb3b802b9668eeb9468188117d302cac0419a02e5f2\",\"license\":\"Apache-2.0\"},\"contracts/modules/ERC20/interfaces/IERC20WithdrawFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface IERC20WithdrawFacet {\\n    event ERC20WithdrawFeeCollected(uint256 fee);\\n    event ERC20WithdrawFor(address receiver, uint256 amount);\\n\\n    function withdrawFor(address _receiver, uint256 _amount) external;\\n\\n    function withdrawForMany(address[] memory _receivers, uint256[] memory _amounts) external;\\n}\\n\",\"keccak256\":\"0x0fa541609304a821768f00c6d613bb0c60607219d72b5ecf74cab7ccfdabbbd4\",\"license\":\"Apache-2.0\"},\"contracts/modules/ERC721/interfaces/IERC721ProxyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface IERC721ProxyFacet {\\n    event ERC721Updated(address old, address current);\\n    event ERC721Minted(address recipient, uint256 tokenId);\\n\\n    function setERC721(address _token) external;\\n\\n    function getERC721() external view returns (address);\\n\\n    function mintFor(address recipient, string memory tokenUri) external;\\n}\\n\",\"keccak256\":\"0xd19e48ece4197904811542b71ca975ddec76248e5d44ebf16360a8bc27a22e63\",\"license\":\"Apache-2.0\"},\"contracts/modules/Factory/FactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { Diamond } from 'diamond-2/contracts/Diamond.sol';\\nimport 'diamond-2/contracts/libraries/LibDiamond.sol';\\nimport '../../interfaces/IDefaultDiamond.sol';\\nimport './interfaces/IFactoryFacet.sol';\\nimport './lib/LibFactoryStorage.sol';\\n\\ncontract FactoryFacet is IFactoryFacet {\\n    /**\\n     * @notice Sets the controller for the factory diamond.\\n     * @param _owner Address of the default owner.\\n     * @param _registry Address of the default registry contract.\\n     */\\n    function initialize(address _owner, address _registry) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactoryStorage.FactoryStorage storage s = LibFactoryStorage.s();\\n        s.defaultOwner = _owner;\\n        s.defaultRegistry = _registry;\\n    }\\n\\n    /**\\n     * @param _facets string Array of FacetCuts that should be deployed\\n     * @param _erc20 address ERC20 address.\\n     * @param _erc721 address ERC721 address.\\n     */\\n    function deploy(\\n        IDiamondCut.FacetCut[] memory _facets,\\n        address _erc20,\\n        address _erc721\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibFactoryStorage.FactoryStorage storage s = LibFactoryStorage.s();\\n        IDefaultDiamond d = _deploy(_facets, s.defaultRegistry);\\n\\n        if (_erc20 != address(0)) {\\n            d.setERC20(_erc20);\\n        }\\n        if (_erc721 != address(0)) {\\n            d.setERC721(_erc721);\\n        }\\n        d.transferOwnership(s.defaultOwner);\\n\\n        emit DiamondDeployed(address(d), _erc721);\\n    }\\n\\n    function _deploy(IDiamondCut.FacetCut[] memory _facets, address _registry) internal returns (IDefaultDiamond) {\\n        Diamond.DiamondArgs memory args;\\n\\n        args.owner = address(this);\\n\\n        Diamond diamond = new Diamond(_facets, args);\\n        IDefaultDiamond d = IDefaultDiamond(address(diamond));\\n\\n        d.setRegistry(_registry);\\n\\n        return d;\\n    }\\n}\\n\",\"keccak256\":\"0x080cf0e4621a5fa310063d065f3d7f4280c10f3288c74cde323607aa4351ede7\",\"license\":\"Apache-2.0\"},\"contracts/modules/Factory/interfaces/IFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport 'diamond-2/contracts/interfaces/IDiamondCut.sol';\\n\\ninterface IFactoryFacet {\\n    event DiamondDeployed(address indexed diamond, address indexed token);\\n\\n    function initialize(address _owner, address _registry) external;\\n\\n    function deploy(\\n        IDiamondCut.FacetCut[] memory _facets,\\n        address _erc20,\\n        address _erc721\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaae9fecdc3f22499c05a60450932f6c4f7da730c8329e40b28b48a7d486fbc3b\",\"license\":\"Apache-2.0\"},\"contracts/modules/Factory/lib/LibFactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\nlibrary LibFactoryStorage {\\n    bytes32 constant FACTORY_STORAGE_POSITION = keccak256('diamond.standard.factory.storage');\\n\\n    struct FactoryStorage {\\n        address defaultOwner;\\n        address defaultRegistry;\\n    }\\n\\n    function s() internal pure returns (FactoryStorage storage store) {\\n        bytes32 position = FACTORY_STORAGE_POSITION;\\n        assembly {\\n            store.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6c3baabbf2fc0a6dbef9a96e5c54049719630c38a041b333667d7972b581efe\",\"license\":\"Apache-2.0\"},\"contracts/modules/Registry/interfaces/IRegistryProxyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface IRegistryProxyFacet {\\n    event RegistryProxyUpdated(address old, address current);\\n\\n    function setRegistry(address _registry) external;\\n\\n    function getRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0817ac63fb945d50b767e780a05397757a1370d59164b6100ffa1abe8fb0c234\",\"license\":\"Apache-2.0\"},\"diamond-2/contracts/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.1;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\r\\n*\\r\\n* Implementation of a diamond.\\r\\n/******************************************************************************/\\r\\n\\r\\nimport \\\"./libraries/LibDiamond.sol\\\";\\r\\nimport \\\"./interfaces/IDiamondLoupe.sol\\\";\\r\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"./interfaces/IERC173.sol\\\";\\r\\nimport \\\"./interfaces/IERC165.sol\\\";\\r\\n\\r\\ncontract Diamond {\\r\\n    // more arguments are added to this struct\\r\\n    // this avoids stack too deep errors\\r\\n    struct DiamondArgs {\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    constructor(IDiamondCut.FacetCut[] memory _diamondCut, DiamondArgs memory _args) payable {\\r\\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\\r\\n        LibDiamond.setContractOwner(_args.owner);\\r\\n\\r\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\r\\n\\r\\n        // adding ERC165 data\\r\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\r\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\r\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\r\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\r\\n    }\\r\\n\\r\\n    // Find facet for function that is called and execute the\\r\\n    // function if a facet is found and return any value.\\r\\n    fallback() external payable {\\r\\n        LibDiamond.DiamondStorage storage ds;\\r\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\r\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\r\\n        assembly {\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch result\\r\\n                case 0 {\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n                default {\\r\\n                    return(0, returndatasize())\\r\\n                }\\r\\n        }\\r\\n    }    \\r\\n}\\r\\n\",\"keccak256\":\"0x64f45c6676622a1dc321d98f575def2da9fead2f4f18b94985789c293f196760\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x19c92fe16028a8e74a5f1914235b3e7f4e5eafbc5fced9fa345cab5cd4644c0c\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x2bf203d5f1fd4f94f7d0de38d664d07126245c9bc434cd15863b2aa6a27cc707\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc19b99fbeaeb943b6d12e6d631b6ae1738aaa498ee49f67caaccc6238fd0d458\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xbd57ffc856416d3ba942ac7b547eb9626c631d5fe2386ccf134b4c473b3d8705\",\"license\":\"MIT\"},\"diamond-2/contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x8f7751980297b63c26a4cf8d7830ba82befde6a07b6a179115985c8d04d6b3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy((address,uint8,bytes4[])[],address,address)": {
        "params": {
          "_erc20": "address ERC20 address.",
          "_erc721": "address ERC721 address.",
          "_facets": "string Array of FacetCuts that should be deployed"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_owner": "Address of the default owner.",
          "_registry": "Address of the default registry contract."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address)": {
        "notice": "Sets the controller for the factory diamond."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}