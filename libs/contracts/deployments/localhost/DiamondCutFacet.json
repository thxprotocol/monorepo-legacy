{
  "address": "0x8B219D3d1FC64e03F6cF3491E7C7A732bF253EC8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x714bedb3609bf093281a76bb25b6e42a923ef5164007e96e3002ec495ddfc5db",
  "receipt": {
    "to": null,
    "from": "0x08302CF8648A961c607e3e7Bd7B7Ec3230c2A6c5",
    "contractAddress": "0x8B219D3d1FC64e03F6cF3491E7C7A732bF253EC8",
    "transactionIndex": 0,
    "gasUsed": "1047119",
    "logsBloom": "0x
    "blockHash": "0x7edc94e383e44d7e0c4bd0c5984a2b081614cbf83977a87c0db209d3051f4853",
    "transactionHash": "0x714bedb3609bf093281a76bb25b6e42a923ef5164007e96e3002ec495ddfc5db",
    "logs": [],
    "blockNumber": 27,
    "cumulativeGasUsed": "1047119",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1f205cb0c017e40b3421c5d4ea1f0343",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"diamond-2/contracts/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"diamond-2/contracts/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {    \\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = LibDiamond.addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        LibDiamond.initializeDiamondCut(_init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x88482a6de4eb9946da9b577c865264b40574c7f06c8bccadd1a0a5207e4a61da\",\"license\":\"MIT\"},\"diamond-2/contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x19c92fe16028a8e74a5f1914235b3e7f4e5eafbc5fced9fa345cab5cd4644c0c\",\"license\":\"MIT\"},\"diamond-2/contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x8f7751980297b63c26a4cf8d7830ba82befde6a07b6a179115985c8d04d6b3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506111fa806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610926565b610045565b005b61004d61022a565b6000610057610268565b600281015490915061ffff168060008060088306111561008857506008810460009081526001840160205260409020545b60005b888110156101635761015683838c8c858181106100a457fe5b90506020028101906100b6919061110f565b6100c4906020810190610905565b8d8d868181106100d057fe5b90506020028101906100e2919061110f565b6100f39060408101906020016109f8565b8e8e878181106100ff57fe5b9050602002810190610111919061110f565b61011f9060408101906110c1565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061028c92505050565b909350915060010161008b565b5082821461017f5760028401805461ffff191661ffff84161790555b60078216156101a05760088204600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67389898989896040516101d7959493929190610ab2565b60405180910390a161021f8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061078f92505050565b505050505050505050565b610232610268565b600401546001600160a01b031633146102665760405162461bcd60e51b815260040161025d90610c95565b60405180910390fd5b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000806000610299610268565b905060008451116102bc5760405162461bcd60e51b815260040161025d90610cd7565b60008560028111156102ca57fe5b14156103f4576001600160a01b0386166102f65760405162461bcd60e51b815260040161025d90610dc6565b61031886604051806060016040528060248152602001611151602491396108b9565b60005b84518110156103ee57600085828151811061033257fe5b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c1561037d5760405162461bcd60e51b815260040161025d90610f0d565b6001600160e01b03198281166000818152602087815260409091206001600160601b031960608e901b168f17905560078e160290811c91811c199b909b16179960e08114156103df5760088c04600090815260018601602052604081209b909b555b5050506001988901980161031b565b50610783565b600185600281111561040257fe5b1415610556576001600160a01b03861661042e5760405162461bcd60e51b815260040161025d90610e12565b6104508660405180606001604052806028815260200161119d602891396108b9565b60005b84518110156103ee57600085828151811061046a57fe5b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c308114156104b85760405162461bcd60e51b815260040161025d90611015565b896001600160a01b0316816001600160a01b031614156104ea5760405162461bcd60e51b815260040161025d90610f62565b6001600160a01b0381166105105760405162461bcd60e51b815260040161025d90611064565b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166001600160601b031960608a901b16179055600101610453565b600285600281111561056457fe5b141561076b576001600160a01b038616156105915760405162461bcd60e51b815260040161025d90610fbf565b6008880460001960078a160160005b865181101561075a57896105cd576000199092016000818152600185016020526040902054995091600791505b6000806000808a85815181106105df57fe5b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c6106295760405162461bcd60e51b815260040161025d90610d22565b606081901c30141561064d5760405162461bcd60e51b815260040161025d90610ebf565b602087028f901b94506001600160e01b0319808616908316146106a2576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166bffffffffffffffffffffffff83161790555b6001600160e01b03198216600090815260208a9052604081205561ffff8116600881049450600881066020029350505050858214610709576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c17905561072d565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b8461074857600086815260018801602052604081208190559c505b505060001990920191506001016105a0565b506001600890920201019750610783565b60405162461bcd60e51b815260040161025d90610d7f565b50959694955050505050565b6001600160a01b0382166107c1578051156107bc5760405162461bcd60e51b815260040161025d90610bf2565b6108b5565b60008151116107e25760405162461bcd60e51b815260040161025d90610e62565b6001600160a01b03821630146108145761081482604051806060016040528060288152602001611175602891396108b9565b600080836001600160a01b03168360405161082f9190610a96565b600060405180830381855af49150503d806000811461086a576040519150601f19603f3d011682016040523d82523d6000602084013e61086f565b606091505b5091509150816108b25780511561089a578060405162461bcd60e51b815260040161025d9190610bbf565b60405162461bcd60e51b815260040161025d90610c4f565b50505b5050565b813b81816108b25760405162461bcd60e51b815260040161025d9190610bbf565b80356001600160a01b03811681146108f157600080fd5b919050565b8035600381106108f157600080fd5b600060208284031215610916578081fd5b61091f826108da565b9392505050565b60008060008060006060868803121561093d578081fd5b853567ffffffffffffffff80821115610954578283fd5b818801915088601f830112610967578283fd5b813581811115610975578384fd5b60208a818284028601011115610989578485fd5b808401985081975061099c818b016108da565b965060408a01359350828411156109b1578485fd5b838a0193508a601f8501126109c4578485fd5b83359150828211156109d4578485fd5b8a818386010111156109e4578485fd5b979a96995094975050909401935090919050565b600060208284031215610a09578081fd5b61091f826108f6565b6001600160a01b03169052565b60008284526020808501945082825b85811015610a615781356001600160e01b03198116808214610a4e578586fd5b8852509582019590820190600101610a2e565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251610aa8818460208701611124565b9190910192915050565b60608082528181018690526000906020608080850190828a028601018a855b8b811015610b8f57878303607f190184528135368e9003605e19018112610af6578788fd5b8d016001600160a01b03610b09826108da565b168452610b178682016108f6565b60038110610b2157fe5b8487015260408181013536839003601e19018112610b3d57898afd5b8201803567ffffffffffffffff811115610b55578a8bfd5b8881023603841315610b65578a8bfd5b8983880152610b798a8801828b8501610a1f565b9789019796505050928601925050600101610ad1565b5050610b9d8387018a610a12565b8581036040870152610bb081888a610a6c565b9b9a5050505050505050505050565b6000602082528251806020840152610bde816040850160208701611124565b601f01601f19169190910160400192915050565b6020808252603c908201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860408201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000606082015260800190565b60208082526026908201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656040820152651d995c9d195960d21b606082015260800190565b60208082526022908201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60408201526132b960f11b606082015260800190565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b60208082526037908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360408201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606082015260800190565b60208082526027908201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756040820152663a20b1ba34b7b760c91b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b60208082526030908201527f4c69624469616d6f6e644375743a205265706c6163652066616365742063616e60408201526f2774206265206164647265737328302960801b606082015260800190565b6020808252603d908201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460408201527f7920627574205f696e6974206973206e6f742061646472657373283029000000606082015260800190565b6020808252602e908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560408201526d3a30b1363290333ab731ba34b7b760911b606082015260800190565b60208082526035908201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6040820152746e207468617420616c72656164792065786973747360581b606082015260800190565b60208082526038908201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60408201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606082015260800190565b60208082526036908201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604082015275657373206d757374206265206164647265737328302960501b606082015260800190565b6020808252602f908201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60408201526e3aba30b1363290333ab731ba34b7b760891b606082015260800190565b60208082526038908201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60408201527f6374696f6e207468617420646f65736e27742065786973740000000000000000606082015260800190565b6000808335601e198436030181126110d7578283fd5b83018035915067ffffffffffffffff8211156110f1578283fd5b602090810192508102360382131561110857600080fd5b9250929050565b60008235605e19833603018112610aa8578182fd5b60005b8381101561113f578181015183820152602001611127565b838111156108b2575050600091015256fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220b4fe0b52e4240898bb8799fe59150cd5ae6b3847ff34a99b47582caf8ee685d364736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610926565b610045565b005b61004d61022a565b6000610057610268565b600281015490915061ffff168060008060088306111561008857506008810460009081526001840160205260409020545b60005b888110156101635761015683838c8c858181106100a457fe5b90506020028101906100b6919061110f565b6100c4906020810190610905565b8d8d868181106100d057fe5b90506020028101906100e2919061110f565b6100f39060408101906020016109f8565b8e8e878181106100ff57fe5b9050602002810190610111919061110f565b61011f9060408101906110c1565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061028c92505050565b909350915060010161008b565b5082821461017f5760028401805461ffff191661ffff84161790555b60078216156101a05760088204600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67389898989896040516101d7959493929190610ab2565b60405180910390a161021f8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061078f92505050565b505050505050505050565b610232610268565b600401546001600160a01b031633146102665760405162461bcd60e51b815260040161025d90610c95565b60405180910390fd5b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6000806000610299610268565b905060008451116102bc5760405162461bcd60e51b815260040161025d90610cd7565b60008560028111156102ca57fe5b14156103f4576001600160a01b0386166102f65760405162461bcd60e51b815260040161025d90610dc6565b61031886604051806060016040528060248152602001611151602491396108b9565b60005b84518110156103ee57600085828151811061033257fe5b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c1561037d5760405162461bcd60e51b815260040161025d90610f0d565b6001600160e01b03198281166000818152602087815260409091206001600160601b031960608e901b168f17905560078e160290811c91811c199b909b16179960e08114156103df5760088c04600090815260018601602052604081209b909b555b5050506001988901980161031b565b50610783565b600185600281111561040257fe5b1415610556576001600160a01b03861661042e5760405162461bcd60e51b815260040161025d90610e12565b6104508660405180606001604052806028815260200161119d602891396108b9565b60005b84518110156103ee57600085828151811061046a57fe5b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c308114156104b85760405162461bcd60e51b815260040161025d90611015565b896001600160a01b0316816001600160a01b031614156104ea5760405162461bcd60e51b815260040161025d90610f62565b6001600160a01b0381166105105760405162461bcd60e51b815260040161025d90611064565b506001600160e01b031990911660009081526020849052604090206bffffffffffffffffffffffff919091166001600160601b031960608a901b16179055600101610453565b600285600281111561056457fe5b141561076b576001600160a01b038616156105915760405162461bcd60e51b815260040161025d90610fbf565b6008880460001960078a160160005b865181101561075a57896105cd576000199092016000818152600185016020526040902054995091600791505b6000806000808a85815181106105df57fe5b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c6106295760405162461bcd60e51b815260040161025d90610d22565b606081901c30141561064d5760405162461bcd60e51b815260040161025d90610ebf565b602087028f901b94506001600160e01b0319808616908316146106a2576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166bffffffffffffffffffffffff83161790555b6001600160e01b03198216600090815260208a9052604081205561ffff8116600881049450600881066020029350505050858214610709576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c17905561072d565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b8461074857600086815260018801602052604081208190559c505b505060001990920191506001016105a0565b506001600890920201019750610783565b60405162461bcd60e51b815260040161025d90610d7f565b50959694955050505050565b6001600160a01b0382166107c1578051156107bc5760405162461bcd60e51b815260040161025d90610bf2565b6108b5565b60008151116107e25760405162461bcd60e51b815260040161025d90610e62565b6001600160a01b03821630146108145761081482604051806060016040528060288152602001611175602891396108b9565b600080836001600160a01b03168360405161082f9190610a96565b600060405180830381855af49150503d806000811461086a576040519150601f19603f3d011682016040523d82523d6000602084013e61086f565b606091505b5091509150816108b25780511561089a578060405162461bcd60e51b815260040161025d9190610bbf565b60405162461bcd60e51b815260040161025d90610c4f565b50505b5050565b813b81816108b25760405162461bcd60e51b815260040161025d9190610bbf565b80356001600160a01b03811681146108f157600080fd5b919050565b8035600381106108f157600080fd5b600060208284031215610916578081fd5b61091f826108da565b9392505050565b60008060008060006060868803121561093d578081fd5b853567ffffffffffffffff80821115610954578283fd5b818801915088601f830112610967578283fd5b813581811115610975578384fd5b60208a818284028601011115610989578485fd5b808401985081975061099c818b016108da565b965060408a01359350828411156109b1578485fd5b838a0193508a601f8501126109c4578485fd5b83359150828211156109d4578485fd5b8a818386010111156109e4578485fd5b979a96995094975050909401935090919050565b600060208284031215610a09578081fd5b61091f826108f6565b6001600160a01b03169052565b60008284526020808501945082825b85811015610a615781356001600160e01b03198116808214610a4e578586fd5b8852509582019590820190600101610a2e565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251610aa8818460208701611124565b9190910192915050565b60608082528181018690526000906020608080850190828a028601018a855b8b811015610b8f57878303607f190184528135368e9003605e19018112610af6578788fd5b8d016001600160a01b03610b09826108da565b168452610b178682016108f6565b60038110610b2157fe5b8487015260408181013536839003601e19018112610b3d57898afd5b8201803567ffffffffffffffff811115610b55578a8bfd5b8881023603841315610b65578a8bfd5b8983880152610b798a8801828b8501610a1f565b9789019796505050928601925050600101610ad1565b5050610b9d8387018a610a12565b8581036040870152610bb081888a610a6c565b9b9a5050505050505050505050565b6000602082528251806020840152610bde816040850160208701611124565b601f01601f19169190910160400192915050565b6020808252603c908201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860408201527f3029206275745f63616c6c64617461206973206e6f7420656d70747900000000606082015260800190565b60208082526026908201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656040820152651d995c9d195960d21b606082015260800190565b60208082526022908201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60408201526132b960f11b606082015260800190565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b60208082526037908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360408201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606082015260800190565b60208082526027908201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756040820152663a20b1ba34b7b760c91b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b60208082526030908201527f4c69624469616d6f6e644375743a205265706c6163652066616365742063616e60408201526f2774206265206164647265737328302960801b606082015260800190565b6020808252603d908201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460408201527f7920627574205f696e6974206973206e6f742061646472657373283029000000606082015260800190565b6020808252602e908201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560408201526d3a30b1363290333ab731ba34b7b760911b606082015260800190565b60208082526035908201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6040820152746e207468617420616c72656164792065786973747360581b606082015260800190565b60208082526038908201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60408201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606082015260800190565b60208082526036908201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604082015275657373206d757374206265206164647265737328302960501b606082015260800190565b6020808252602f908201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60408201526e3aba30b1363290333ab731ba34b7b760891b606082015260800190565b60208082526038908201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60408201527f6374696f6e207468617420646f65736e27742065786973740000000000000000606082015260800190565b6000808335601e198436030181126110d7578283fd5b83018035915067ffffffffffffffff8211156110f1578283fd5b602090810192508102360382131561110857600080fd5b9250929050565b60008235605e19833603018112610aa8578182fd5b60005b8381101561113f578181015183820152602001611127565b838111156108b2575050600091015256fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220b4fe0b52e4240898bb8799fe59150cd5ae6b3847ff34a99b47582caf8ee685d364736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}